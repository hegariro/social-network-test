services:
  # Base de datos PostgreSQL compartida
  postgres-db:
    image: postgres:16-alpine
    container_name: postgres-microservices
    restart: unless-stopped
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DATABASE}
      POSTGRES_USER: ${POSTGRES_USER}
    ports:
      - "5432:5432"
    volumes:
      - ./storage/postgres/data:/var/lib/postgresql/data
      - ./storage/postgres/init:/docker-entrypoint-initdb.d
    networks:
      - microservices-network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DATABASE}" ]
      timeout: 20s
      retries: 10
      interval: 10s

  # Microservicio Backend
  backend-service:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: backend-services
    restart: unless-stopped
    ports:
      - "8081:8081"
    environment:
      # Variables de entorno para Spring Boot
      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE} # para validar rutas sin activar spring security usar "debug"
      SPRING_DATASOURCE_URL: ${SPRING_DATASOURCE_URL}
      SPRING_DATASOURCE_USERNAME: ${SPRING_DATASOURCE_USERNAME}
      SPRING_DATASOURCE_PASSWORD: ${SPRING_DATASOURCE_PASSWORD}
      SPRING_DATASOURCE_DRIVER_CLASS_NAME: ${SPRING_DATASOURCE_DRIVER_CLASS_NAME}
      SPRING_JPA_HIBERNATE_DDL_AUTO: ${SPRING_JPA_HIBERNATE_DDL_AUTO}
      SPRING_JPA_DATABASE_PLATFORM: ${SPRING_JPA_DATABASE_PLATFORM}
      JWT_SECRET_KEY: ${JWT_SECRET_KEY}
      # Configuración adicional
      SERVER_PORT: ${SERVER_PORT}
      LOGGING_LEVEL: ${LOGGING_LEVEL}
    volumes:
      - ./storage/backend/logs:/app/logs
    networks:
      - microservices-network
    depends_on:
      - postgres-db
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/api/actuator/health"]
      timeout: 10s
      retries: 5
      interval: 30s

  # Microservicio Frontend
  frontend-service:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: frontend-service
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      NODE_ENV: ${NODE_ENV}
      VITE_API_BASE_URL: ${VITE_API_BASE_URL}
      VITE_APP_PORT: ${VITE_APP_PORT}
    volumes:
      - ./storage/frontend/logs:/app/logs
      - ./frontend:/app
      - /app/node_modules
    networks:
      - microservices-network
    depends_on:
      backend-service:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      timeout: 10s
      retries: 5
      interval: 30s

# Definición de la red compartida
networks:
  microservices-network:
    driver: bridge
